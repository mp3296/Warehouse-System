# main.py is a console-based application that uses the Warehouse class to manage inventory items. The user can add, remove, update, and view items in the inventory. The application uses the DatabaseManager class to interact with the SQLite database.
from warehouse_system import DatabaseManager, Warehouse, ConcreteStockItem

if __name__ == "__main__":
    db_manager = DatabaseManager()
    warehouse = Warehouse(db_manager)

    print("Welcome to the Inventory Management System")

    while True:
        print("\nMenu:")
        print("1. Add Item")
        print("2. Remove Item")
        print("3. View Inventory")
        print("4. Update Item")
        print("5. Exit")
        choice = input("Enter your choice: ")

        if choice == '1':
            name = input("Enter item name: ").strip()
            if not name:
                print("Item name cannot be empty.")
                continue

            try:
                quantity_str = input("Enter item quantity: ").strip()
                quantity = int(quantity_str)
                if quantity < 0:
                    raise ValueError("Quantity cannot be negative.")
            except ValueError:
                print("Invalid quantity. Please enter a non-negative integer.")
                continue
            
            category = input("Enter item category: ").strip()
            if not category:
                print("Item category cannot be empty.")
                continue

            item = ConcreteStockItem(None, name, quantity, category)
            warehouse.add_item(item)
            print("Item added successfully!")

        elif choice == '2':
            try:
                item_id = int(input("Enter item ID to remove: "))
                item = warehouse.get_item(item_id)
                if item is None:
                    print("Item with the specified ID does not exist.")
                    continue
                
                warehouse.remove_item(item_id)
                print("Item removed successfully!")

            except ValueError:
                print("Invalid ID. Please enter a valid integer.")

        elif choice == '3':
            print("\nCurrent Inventory:")
            items = warehouse.list_items()
            if not items:
                print("No items in inventory.")
            else:
                for item in items:
                    print(item)

        elif choice == '4':
            try:
                item_id = int(input("Enter item ID to update: "))
                name = input("Enter new item name (leave blank to keep current): ").strip()
                quantity_str = input("Enter new item quantity (leave blank to keep current): ").strip()
                category = input("Enter new item category (leave blank to keep current): ").strip()

                current_item = warehouse.get_item(item_id)
                if not current_item:
                    print("Item not found.")
                    continue

                new_name = name if name else current_item.name
                new_quantity = int(quantity_str) if quantity_str else current_item.quantity
                if quantity_str and new_quantity < 0:
                    print("Quantity cannot be negative.")
                    continue
                new_category = category if category else current_item.category

                updated_item = ConcreteStockItem(item_id, new_name, new_quantity, new_category)
                warehouse.update_item(updated_item)
                print("Item updated successfully!")

            except ValueError:
                print("Invalid input. Please enter a valid item ID and quantity.")

        elif choice == '5':
            print("Exiting the system. Goodbye!")
            break

        else:
            print("Invalid choice. Please try again.")

    db_manager.close()

#gui_warehoue.py is a GUI application that allows users to manage a warehouse inventory system. The application uses the tkinter library to create the GUI components and interacts with the warehouse_system module to manage the inventory data. The application allows users to add, update, and remove items from the inventory, as well as view the list of items in the warehouse.
import tkinter as tk
from tkinter import messagebox, ttk
from warehouse_system import DatabaseManager, Warehouse, ConcreteStockItem

class WarehouseGUI:
    def __init__(self, root, warehouse):
        self.root = root
        self.warehouse = warehouse

        self.root.title("Inventory Management System")
        self.root.geometry("600x400")

        # Create the GUI components
        self.create_widgets()

    def create_widgets(self):
        # Title
        title_label = tk.Label(self.root, text="Inventory Management System", font=("Helvetica", 16))
        title_label.pack(pady=10)

        # Item List
        self.tree = ttk.Treeview(self.root, columns=("ID", "Name", "Quantity", "Category"), show="headings")
        self.tree.heading("ID", text="ID")
        self.tree.heading("Name", text="Name")
        self.tree.heading("Quantity", text="Quantity")
        self.tree.heading("Category", text="Category")
        self.tree.column("ID", width=50)
        self.tree.column("Name", width=150)
        self.tree.column("Quantity", width=100)
        self.tree.column("Category", width=150)
        self.tree.pack(pady=10, fill=tk.BOTH, expand=True)

        # Buttons
        button_frame = tk.Frame(self.root)
        button_frame.pack(pady=10)

        add_button = tk.Button(button_frame, text="Add Item", command=self.add_item_popup)
        add_button.grid(row=0, column=0, padx=10)

        remove_button = tk.Button(button_frame, text="Remove Item", command=self.remove_item)
        remove_button.grid(row=0, column=1, padx=10)

        update_button = tk.Button(button_frame, text="Update Item", command=self.update_item_popup)
        update_button.grid(row=0, column=2, padx=10)

        refresh_button = tk.Button(button_frame, text="Refresh List", command=self.load_items)
        refresh_button.grid(row=0, column=3, padx=10)

        exit_button = tk.Button(button_frame, text="Exit", command=self.root.quit)
        exit_button.grid(row=0, column=4, padx=10)

        # Load items
        self.load_items()

    def load_items(self):
        """Load items from the warehouse into the Treeview."""
        for row in self.tree.get_children():
            self.tree.delete(row)

        for item in self.warehouse.list_items():
            self.tree.insert("", tk.END, values=(item.item_id, item.name, item.quantity, item.category))

    def add_item_popup(self):
        """Open a popup window to add a new item."""
        popup = tk.Toplevel(self.root)
        popup.title("Add Item")
        popup.geometry("300x250")

        tk.Label(popup, text="Name:").pack(pady=5)
        name_entry = tk.Entry(popup)
        name_entry.pack(pady=5)

        tk.Label(popup, text="Quantity:").pack(pady=5)
        quantity_entry = tk.Entry(popup)
        quantity_entry.pack(pady=5)

        tk.Label(popup, text="Category:").pack(pady=5)
        category_entry = tk.Entry(popup)
        category_entry.pack(pady=5)

        def add_item_action():
            try:
                name = name_entry.get().strip()
                quantity_str = quantity_entry.get().strip()
                quantity = int(quantity_str)
                if quantity < 0:
                    raise ValueError("Quantity cannot be negative.")
                category = category_entry.get().strip()

                if not name or not category:
                    raise ValueError("Name and category cannot be empty.")

                item = ConcreteStockItem(None, name, quantity, category)
                self.warehouse.add_item(item)
                self.load_items()
                messagebox.showinfo("Success", "Item added successfully!")
                popup.destroy()
            except ValueError as e:
                messagebox.showerror("Error", f"Invalid input: {e}")

        add_button = tk.Button(popup, text="Add", command=add_item_action)
        add_button.pack(pady=10)

    def update_item_popup(self):
        """Open a popup window to update an existing item."""
        selected = self.tree.focus()
        if not selected:
            messagebox.showerror("Error", "No item selected.")
            return

        item_values = self.tree.item(selected, "values")
        item_id = int(item_values[0])

        popup = tk.Toplevel(self.root)
        popup.title("Update Item")
        popup.geometry("300x250")

        tk.Label(popup, text="Name:").pack(pady=5)
        name_entry = tk.Entry(popup)
        name_entry.insert(0, item_values[1])
        name_entry.pack(pady=5)

        tk.Label(popup, text="Quantity:").pack(pady=5)
        quantity_entry = tk.Entry(popup)
        quantity_entry.insert(0, item_values[2])
        quantity_entry.pack(pady=5)

        tk.Label(popup, text="Category:").pack(pady=5)
        category_entry = tk.Entry(popup)
        category_entry.insert(0, item_values[3])
        category_entry.pack(pady=5)

        def update_item_action():
            try:
                name = name_entry.get().strip()
                quantity_str = quantity_entry.get().strip()
                quantity = int(quantity_str)
                if quantity < 0:
                    raise ValueError("Quantity cannot be negative.")
                category = category_entry.get().strip()

                if not name or not category:
                    raise ValueError("Name and category cannot be empty.")

                updated_item = ConcreteStockItem(item_id, name, quantity, category)
                self.warehouse.update_item(updated_item)
                self.load_items()
                messagebox.showinfo("Success", "Item updated successfully!")
                popup.destroy()
            except ValueError as e:
                messagebox.showerror("Error", f"Invalid input: {e}")

        update_button = tk.Button(popup, text="Update", command=update_item_action)
        update_button.pack(pady=10)

    def remove_item(self):
        """Remove the selected item."""
        selected = self.tree.focus()
        if not selected:
            messagebox.showerror("Error", "No item selected.")
            return

        item_id = self.tree.item(selected, "values")[0]
        try:
            self.warehouse.remove_item(int(item_id))
            self.load_items()
            messagebox.showinfo("Success", "Item removed successfully!")
        except ValueError as e:
            messagebox.showerror("Error", f"Unable to remove item: {e}")

if __name__ == "__main__":
    db_manager = DatabaseManager()
    warehouse = Warehouse(db_manager)

    root = tk.Tk()
    app = WarehouseGUI(root, warehouse)
    root.mainloop()

    db_manager.close()

#warehouse.py is a module that contains classes for managing a warehouse inventory system. The module includes a DatabaseManager class for interacting with an SQLite database, a StockItem abstract class, a ConcreteStockItem class that implements the StockItem interface, and a Warehouse class that uses the DatabaseManager to manage inventory items. The Warehouse class provides methods for adding, removing, updating, and listing items in the inventory. The ConcreteStockItem class represents a concrete implementation of a stock item with methods for updating the quantity of the item. The DatabaseManager class handles database operations such as adding, removing, updating, and retrieving items from the database. The module can be used in both console-based and GUI applications to manage inventory data.
import sqlite3
from abc import ABC, abstractmethod

# Database Manager
class DatabaseManager:
    def __init__(self, db_name="warehouse.db"):
        self.db_name = db_name
        self.connection = sqlite3.connect(self.db_name)
        self.cursor = self.connection.cursor()
        self.create_table()

    def create_table(self):
        self.cursor.execute('''CREATE TABLE IF NOT EXISTS stock_items (
                               item_id INTEGER PRIMARY KEY AUTOINCREMENT,
                               name TEXT,
                               quantity INTEGER,
                               category TEXT)''')
        self.connection.commit()

    def add_item_to_db(self, item):
        self.cursor.execute('''INSERT INTO stock_items (name, quantity, category) 
                               VALUES (?, ?, ?)''', (item.name, item.quantity, item.category))
        self.connection.commit()
        item.item_id = self.cursor.lastrowid

    def remove_item_from_db(self, item_id):
        self.cursor.execute('DELETE FROM stock_items WHERE item_id = ?', (item_id,))
        self.connection.commit()

    def get_items_from_db(self):
        self.cursor.execute('SELECT * FROM stock_items')
        rows = self.cursor.fetchall()
        return [ConcreteStockItem(row[0], row[1], row[2], row[3]) for row in rows]

    def update_item_in_db(self, item):
        self.cursor.execute('''
            UPDATE stock_items
            SET name = ?, quantity = ?, category = ?
            WHERE item_id = ?
        ''', (item.name, item.quantity, item.category, item.item_id))
        self.connection.commit()

    def close(self):
        self.connection.close()

# Abstract StockItem Class
class StockItem(ABC):
    def __init__(self, item_id, name, quantity, category):
        self.item_id = item_id
        self.name = name
        self.quantity = quantity
        self.category = category

    @abstractmethod
    def update_quantity(self, amount):
        pass

    def __str__(self):
        return f"Item ID: {self.item_id}, Name: {self.name}, Quantity: {self.quantity}, Category: {self.category}"

# Concrete StockItem Class
class ConcreteStockItem(StockItem):
    def update_quantity(self, amount):
        if amount < 0 and self.quantity + amount < 0:
            raise ValueError("Quantity cannot be negative.")
        self.quantity += amount

# Warehouse Class
class Warehouse:
    def __init__(self, db_manager):
        self.db_manager = db_manager

    def add_item(self, item):
        """Add an item to the inventory."""
        self.db_manager.add_item_to_db(item)

    def remove_item(self, item_id):
        """Remove an item from the inventory by its ID."""
        self.db_manager.remove_item_from_db(item_id)

    def list_items(self):
        """List all items in the inventory."""
        return self.db_manager.get_items_from_db()

    def get_item(self, item_id):
        """Get a specific item from the inventory by its ID."""
        items = self.db_manager.get_items_from_db()
        for item in items:
            if item.item_id == item_id:
                return item
        return None

    def update_item(self, updated_item):
        """Update an existing item in the inventory."""
        self.db_manager.update_item_in_db(updated_item)
